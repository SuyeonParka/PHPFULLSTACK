<?php

/*
<콘솔에 출력(출력하는 방법)>
print"프린트";

echo "에코";

print_r(array(1,2,3));

var_dump(array(3,4,5));
*/



/*
콘솔은 사실상 유저가 볼 수 없음
print_r(array(1,2,3));
var_dump(array(3,4,5));
내부구조를 보려고할때(보안상 문제)
-var_dump:최종때는 얘네를 지워줘야함, 상세정보, 키 값 , 벨류값 보여줌
-print는 echo보다 느림
-print_r은 array까지 출력, 어디서 진행, 사이즈, 데이터형까지 다 보여줌
*/

/*
<변수 : 정보들을 저장하는 함수>
$int_i = 1;

echo $int_1; //변수를 출력할 때

$sum = $int_i + 5; //변수를 이용하여 계산?을 할때


변수 $int_i에 1을 저장한다는 뜻
변수 이름을 지정할 때 주의사항들 알아두기 
-변수는 $ 문자로 시작
-변수의 이름은 영어 대문자, 소문자, 숫자, '-'로 이루어짐
-$ 다음의 첫문자로 숫자를 사용할 수 없다.
-카멜(대문자), 스네이크(_)기법도 있음(섞어서 쓰지 말 것)
(스네이크 : 모든 문자 영어 소문자, 단어사이의 연결은 '_'로 작성, c, php, ruby등)
(카멜(낙타) : 영어만 사용, 단어와 단어 사이에 첫글자를 대문자로 적음, $arrFood , java 등)
-영어 숫자, - 외 에는 사용 불가
-define(상수)와 구분하기 위해서 변수는 항상 소문자로!
*/

/*<문제>
숫자 10을 변수 $i_ten에 저장, 숫자 5, 8, 3을 각각 저장
아래 연산을 해주세요. 
10-5+8하고, 3으로 나눈 나머지를 구해주세요.
변수를 바로 출력하지 말고 저장하고 출력

$i_ten = 10;
$i_five = 5;
$i_eight = 8;
$i_three = 3;

$result = ($i_ten - $i_five + $i_eight) % $i_three;
echo $result;

*/

/*
<증가연산자, 감소연산자>

$i_increase = 0;
$i_decrease = 0;

++$i_increase; //전위증가연산자 : 연산을 먼저하고 에코찍음
$i_increase++; //후위증가연산자 : 기존의 값을 에코로 찍고 다음에 증가를 시킴
// echo $i_increase;

$i_increase = 0;
echo ++$i_increase, "\n";
echo $i_increase++;

echo $i_increase;

--$i_decrease; //전위감소연산자 
$i_decrease--; //후위감소연산자

<대입 연산자>

// $i = 0;

// $i += 2;  //그럼 이방식은 저장이 안되는건가요?
// echo $i;
// $i -= 1;
// $i *= 1;
// $i /= 1;
// $i %= 1;

<문자열 합치기>
$str = "aa";
$str = $str."aa"; //이걸 줄인게 위에 꺼
$str .= "bb";
echo $str;


<비교연산자>

$a < $b; : a가 b보다 작다, b가 a보다 크다
$a > $b; : a가 b보다 크다, b가 a보다 작다
$a <= $b; : a가 b보다 작거나 같다, b가 a보다 크거나 같다.
$a >= $b; : a가 b보다 크거나 같다, b가 a보다 작거나 같다.
$a != $b :  a와 b의 값이 다르다
$a !== $b : a와 b가 값과 데이터형식이 다르다(완전비교)v
$a == $b : a와 b가 값이 같다
$a === $b : a와 b가 값과 데이터형식이 같다v
데이터를 비교할 때는 v된 걸 사용(버그 줄이기)


$a = 1;
$b = "1";
var_dump($a != $b);
var_dump($a !== $b);



값만 비교했을 때에는 1과 "1"의 생긴게 같아서 다른게 아니다! 해서 false
밑에는 데이터형식이 int와 string으로 달라서 두개가 다른게 맞으니 true

var_dump(false == 0);
var_dump(true == 1);
느슨한 비교

var_dump(false === 0); 
var_dump(true === 1);
완전비교를 해야함

<논리 연산자>
조건문이나 반복문에서 조건을 줄 때 많이 사용하는 것
&&(and) : 모든 조건이 만족해야할 때 사용
||(or) : 여러 조건 중 하나만 만족할 때 사용
!(not) : 결과를 반전시킬 때 사용


$i = 1;
var_dump( $i === 1 && $i < 1 && $i > 0);

$i = 1;
var_dump( $i === 2 || $i < 1 || $i < 0);

$i = 1;
var_dump( !($i === 2) ); //$i=2는 false, !를 만나서 결과 true로 바뀜
var_dump( !false ); //이런경우 true 추출


삼항연산자 : 조건 ? 참일 경우 : 거짓일 경우
젤 앞에 조건 ? 참일 경우에 : 거짓일 경우에

$i = 1;
$str = "";
$i < 0 ? $str =  "000" : $str =  "111";
echo $str;

삼항 연산자를 이용해서 짝수일 떄는 짝수를 출력 홀수일 때는 홀수를 출력


$i = 6;
$str = "";
$i % 2 === 0 ? $str = "짝수" : $str = "홀수";
echo $str;


*/





?>